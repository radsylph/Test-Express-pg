import { Injectable, Component } from '@angular/core';
import { Http, Response, RequestOptions, Headers, URLSearchParams } from '@angular/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';
import { NotificationsService } from 'angular2-notifications';
import { Router } from '@angular/router';

@Injectable()
export class ConfigService {
  static headers = new Headers();
  public TOKEN: string;
  public routeProduccionLogin : string = 'https://testaplicaciones.ams.red/SaludSys/?needToken=true&redirect=http://testphp.ams.red/login';
  public routeTestingLogin : string = 'https://testaplicaciones.ams.red/SaludSys/?needToken=true&redirect=http://testphp.ams.red/login';
  public hostSeguridad: string = "http://serviciosjbosstest.ams.red:8080/Seguridad/webresources/ServicioUsuario/";
  public hostPrestadores: string = "http://serviciosjbosstest.ams.red:8080/Prestadores/webresources/ServicioPrestador/";
  public hostPrestaciones: string = "http://serviciosjbosstest.ams.red:8080/SancorSalud/webresources/ServicioPrestaciones/";
  public hostBandejaEntrada: string = "http://serviciosjbosstest.ams.red:8080/ProyectoReintegros/webresources/reintegro/";

  constructor(private _notificationsService: NotificationsService, private router: Router, private http: Http) { }

  public getHeaders(): Headers { return ConfigService.headers; }

  public getHost(): string {
    if(environment.ambiente == 'produccion'){
      return 'http://serviciosjbosstest.ams.red:8080';
    }
    if(environment.ambiente == 'test'){
      return 'http://serviciosjbosstest.ams.red:8080';
    }
    if(environment.ambiente == 'local'){
      return 'http://localhost:8080';
    }
  }

  // Error WebService
  public getWebServiceError (error: any) {

    let errMsg: any;
    if (error instanceof Response) {
      errMsg = `${error.status} - ${error.statusText || ''}`;
    } else {
      errMsg = error.message ? error.message : error.toString();
    }
    return Observable.throw(errMsg);
  }

  public obtenerDatos(response) {
    if(response.headers.get('X-AUTHENTICATION-TOKEN') != null){
      localStorage.setItem('X-AUTHENTICATION-TOKEN', response.headers.get('X-AUTHENTICATION-TOKEN'));
    }
    return response.json();
  }

  public getDatos(path:any,  onSuccess: any, onError: any): Promise<any> {
    let headers = new Headers({ 'Content-Type': 'application/json' });
    let options = new RequestOptions({ headers: headers });
    const params: URLSearchParams = new URLSearchParams();
    options.search = params;

    return this.http.get(this.getHost() + path, options)
      .toPromise()
      .then(response => this.manejarRespuesta(response, onSuccess, onError))
      .catch(response => this.manejarError(response));
  }

  public postDatos(path:string, body: any, onSuccess: any, onError: any): Promise<any> {
    const options: RequestOptions = new RequestOptions({ headers: this.getHeaders() });
    return this.http.post(this.getHost() + path ,
      body,
      options)
      .toPromise()
      .then(response => this.manejarRespuesta(response, onSuccess, onError))
      .catch(response => this.manejarError(response));
  }

  public putDatos(path:string, body: any, onSuccess: any, onError: any): Promise<any> {
    const options: RequestOptions = new RequestOptions({ headers: this.getHeaders() });
    return this.http.put(this.getHost() + path ,
      body,
      options)
      .toPromise()
      .then(response => this.manejarRespuesta(response, onSuccess, onError))
      .catch(response => this.manejarError(response));
  }

  public manejarRespuesta (response: Response, onSuccess: any, onError: any) {
    let resJson;
    if (response.text()) {
      resJson = response.json();
    }
    if (response.status === 200) {
      if(response.headers.get('X-AUTHENTICATION-TOKEN') != null){
        localStorage.setItem('X-AUTHENTICATION-TOKEN', response.headers.get('X-AUTHENTICATION-TOKEN'));
      }
      if (resJson.mensaje) {
        //this.crearNotificacion('Ã‰xito', resJson.mensaje, 'success');
      }
      onSuccess(resJson);
    } else if (response.status === 401) {
      // mandar al LOGIN
      this.router.navigate(['/auth-error']);
    } else if (response.status === 299) {
      //corresponde a validacion
      if(resJson.datos && resJson.datos.listaErrores && resJson.datos.listaErrores.length > 0) {
        for (let i = 0; i < resJson.datos.listaErrores.length; i++) {
          this.crearNotificacion('Alerta', resJson.datos.listaErrores[i].mensajeError, 'alert');
        }
      }
      if (resJson.mensaje) {
        this.crearNotificacion('Alerta', resJson.mensaje, 'alert');
      }
      if(onError){
        onError(resJson)
      }
    } else {
      if(resJson.datos && resJson.datos.listaErrores && resJson.datos.listaErrores.length > 0) {
        for (let i = 0; i < resJson.datos.listaErrores.length; i++) {
          this.crearNotificacion('ERROR', resJson.datos.listaErrores[i].mensajeError, 'error');
        }
      }
      if(resJson.mensaje){
        this.crearNotificacion('ERROR', resJson.mensaje, 'error');
      }
    }
  }

  public manejarError(response: any){
    let resJson;
    if (response.text) {
      resJson = response.json();
      if(resJson.datos && resJson.datos.listaErrores && resJson.datos.listaErrores.length > 0) {
        for (let i = 0; i < resJson.datos.listaErrores.length; i++) {
          this.crearNotificacion('ERROR', resJson.datos.listaErrores[i].mensajeError, 'error');
        }
      }
      if(resJson.mensaje){
        this.crearNotificacion('ERROR', resJson.mensaje, 'error');
      } else if(resJson.error){
        this.crearNotificacion('ERROR', resJson.error, 'error');
      }
    } else{
      this.crearNotificacion('ERROR', "Error del servidor", 'error');
    }
  }

  public crearNotificacion(titulo, body, tipo){
    this._notificationsService.create(titulo, body, tipo, {
      timeOut: 3000,
      showProgressBar: false,
      pauseOnHover: true,
      clickToClose: false,
      maxLength: 1000
    })
  }
}
